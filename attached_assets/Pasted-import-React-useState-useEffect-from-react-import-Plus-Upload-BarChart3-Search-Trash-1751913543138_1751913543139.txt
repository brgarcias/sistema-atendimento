import React, { useState, useEffect } from 'react';
import { Plus, Upload, BarChart3, Search, Trash2, X, Users, TrendingUp, Clock, CheckCircle } from 'lucide-react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, BarChart, Bar } from 'recharts';

const SistemaAtendimento = () => {
  const [executivos, setExecutivos] = useState([
    { id: 1, nome: 'Bruno Berti', cor: '#3B82F6' },
    { id: 2, nome: 'Guilherme Ferreira', cor: '#10B981' },
    { id: 3, nome: 'Rodrigo Giardina', cor: '#F59E0B' }
  ]);
  
  const [clientes, setClientes] = useState([]);
  const [novoCliente, setNovoCliente] = useState('');
  const [novoExecutivo, setNovoExecutivo] = useState('');
  const [busca, setBusca] = useState('');
  const [showDashboard, setShowDashboard] = useState(false);
  const [proximoExecutivo, setProximoExecutivo] = useState(0);
  const [erro, setErro] = useState('');
  const [filtroColuna, setFiltroColuna] = useState('');
  const [uploadExecutivo, setUploadExecutivo] = useState('');
  const [listaClientes, setListaClientes] = useState('');
  const [showListaInput, setShowListaInput] = useState(false);

  const cores = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899', '#06B6D4', '#84CC16'];

  const adicionarCliente = () => {
    if (!novoCliente.trim()) return;
    
    const clienteExistente = clientes.find(c => 
      c.nome.toLowerCase() === novoCliente.toLowerCase().trim()
    );
    
    if (clienteExistente) {
      setErro(`Cliente "${novoCliente}" já está sendo atendido por ${clienteExistente.executivo}`);
      setTimeout(() => setErro(''), 3000);
      return;
    }

    const executivoAtual = executivos[proximoExecutivo];
    
    const novoClienteObj = {
      id: Date.now(),
      nome: novoCliente.trim(),
      executivo: executivoAtual.nome,
      dataEntrada: new Date().toLocaleString('pt-BR'),
      propostaEnviada: false,
      cor: executivoAtual.cor
    };

    setClientes([...clientes, novoClienteObj]);
    setNovoCliente('');
    
    // Avançar para o próximo executivo
    setProximoExecutivo((proximoExecutivo + 1) % executivos.length);
    setErro('');
  };

  const adicionarExecutivo = () => {
    if (!novoExecutivo.trim()) return;
    
    const executivoExistente = executivos.find(e => 
      e.nome.toLowerCase() === novoExecutivo.toLowerCase().trim()
    );
    
    if (executivoExistente) {
      setErro('Executivo já existe na lista');
      setTimeout(() => setErro(''), 3000);
      return;
    }

    const novoExec = {
      id: Date.now(),
      nome: novoExecutivo.trim(),
      cor: cores[executivos.length % cores.length]
    };

    setExecutivos([...executivos, novoExec]);
    setNovoExecutivo('');
    setErro('');
  };

  const removerExecutivo = (id) => {
    if (executivos.length <= 1) {
      setErro('Deve haver pelo menos um executivo');
      setTimeout(() => setErro(''), 3000);
      return;
    }

    const executivoRemover = executivos.find(e => e.id === id);
    
    // Remover clientes do executivo
    setClientes(clientes.filter(c => c.executivo !== executivoRemover.nome));
    
    // Remover executivo
    const novosExecutivos = executivos.filter(e => e.id !== id);
    setExecutivos(novosExecutivos);
    
    // Ajustar próximo executivo
    if (proximoExecutivo >= novosExecutivos.length) {
      setProximoExecutivo(0);
    }
  };

  const pularCliente = () => {
    setProximoExecutivo((proximoExecutivo + 1) % executivos.length);
  };

  const toggleProposta = (id) => {
    setClientes(clientes.map(cliente => 
      cliente.id === id 
        ? { ...cliente, propostaEnviada: !cliente.propostaEnviada }
        : cliente
    ));
  };

  const excluirCliente = (id) => {
    setClientes(clientes.filter(cliente => cliente.id !== id));
  };

  const processarListaManual = () => {
    if (!listaClientes.trim()) {
      setErro('Digite os nomes dos clientes');
      setTimeout(() => setErro(''), 3000);
      return;
    }
    
    const executivoSelecionado = executivos.find(e => e.nome === uploadExecutivo);
    if (!executivoSelecionado) {
      setErro('Selecione um executivo para associar a lista');
      setTimeout(() => setErro(''), 3000);
      return;
    }

    const nomes = listaClientes.split('\n').map(nome => nome.trim()).filter(nome => nome);
    
    const novosClientes = nomes.map(nome => ({
      id: Date.now() + Math.random(),
      nome,
      executivo: executivoSelecionado.nome,
      dataEntrada: new Date().toLocaleString('pt-BR'),
      propostaEnviada: false,
      cor: executivoSelecionado.cor
    }));

    setClientes([...clientes, ...novosClientes]);
    setListaClientes('');
    setShowListaInput(false);
    setErro('');
  };

  const processarUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      const text = e.target.result;
      const nomes = text.split('\n').map(nome => nome.trim()).filter(nome => nome);
      
      const executivoSelecionado = executivos.find(e => e.nome === uploadExecutivo);
      if (!executivoSelecionado) {
        setErro('Selecione um executivo para associar a lista');
        setTimeout(() => setErro(''), 3000);
        return;
      }

      const novosClientes = nomes.map(nome => ({
        id: Date.now() + Math.random(),
        nome,
        executivo: executivoSelecionado.nome,
        dataEntrada: new Date().toLocaleString('pt-BR'),
        propostaEnviada: false,
        cor: executivoSelecionado.cor
      }));

      setClientes([...clientes, ...novosClientes]);
    };
    reader.readAsText(file);
  };

  const clientesFiltrados = clientes.filter(cliente => {
    const termoBusca = busca.toLowerCase();
    const filtro = filtroColuna.toLowerCase();
    
    return (
      cliente.nome.toLowerCase().includes(termoBusca) ||
      cliente.executivo.toLowerCase().includes(termoBusca)
    ) && (
      !filtro || 
      cliente.nome.toLowerCase().includes(filtro) ||
      cliente.executivo.toLowerCase().includes(filtro) ||
      cliente.dataEntrada.toLowerCase().includes(filtro)
    );
  });

  const estatisticas = executivos.map(exec => {
    const clientesExec = clientes.filter(c => c.executivo === exec.nome);
    const propostas = clientesExec.filter(c => c.propostaEnviada).length;
    return {
      nome: exec.nome,
      total: clientesExec.length,
      propostas,
      pendentes: clientesExec.length - propostas,
      cor: exec.cor,
      percentual: clientes.length > 0 ? ((clientesExec.length / clientes.length) * 100).toFixed(1) : 0
    };
  });

  const dadosGrafico = estatisticas.map(stat => ({
    nome: stat.nome,
    Total: stat.total,
    Propostas: stat.propostas,
    Pendentes: stat.pendentes
  }));

  const dadosPizza = estatisticas.map(stat => ({
    name: stat.nome,
    value: stat.total,
    color: stat.cor
  }));

  const totalClientes = clientes.length;
  const totalPropostas = clientes.filter(c => c.propostaEnviada).length;
  const taxaConversao = totalClientes > 0 ? ((totalPropostas / totalClientes) * 100).toFixed(1) : 0;

  if (showDashboard) {
    return (
      <div className="max-w-7xl mx-auto p-6 bg-gray-50 min-h-screen">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold text-gray-800 flex items-center gap-2">
            <BarChart3 className="text-blue-600" />
            Dashboard de Atendimentos
          </h1>
          <button
            onClick={() => setShowDashboard(false)}
            className="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 flex items-center gap-2"
          >
            <X size={16} />
            Fechar Dashboard
          </button>
        </div>

        {/* Cards de Estatísticas */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-white p-6 rounded-lg shadow-lg border-l-4 border-blue-500">
            <div className="flex items-center gap-2">
              <Users className="text-blue-500" size={24} />
              <div>
                <p className="text-sm text-gray-600">Total de Clientes</p>
                <p className="text-2xl font-bold text-blue-600">{totalClientes}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-6 rounded-lg shadow-lg border-l-4 border-green-500">
            <div className="flex items-center gap-2">
              <CheckCircle className="text-green-500" size={24} />
              <div>
                <p className="text-sm text-gray-600">Propostas Enviadas</p>
                <p className="text-2xl font-bold text-green-600">{totalPropostas}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-6 rounded-lg shadow-lg border-l-4 border-orange-500">
            <div className="flex items-center gap-2">
              <Clock className="text-orange-500" size={24} />
              <div>
                <p className="text-sm text-gray-600">Pendentes</p>
                <p className="text-2xl font-bold text-orange-600">{totalClientes - totalPropostas}</p>
              </div>
            </div>
          </div>
          
          <div className="bg-white p-6 rounded-lg shadow-lg border-l-4 border-purple-500">
            <div className="flex items-center gap-2">
              <TrendingUp className="text-purple-500" size={24} />
              <div>
                <p className="text-sm text-gray-600">Taxa de Conversão</p>
                <p className="text-2xl font-bold text-purple-600">{taxaConversao}%</p>
              </div>
            </div>
          </div>
        </div>

        {/* Gráfico */}
        <div className="grid grid-cols-1 gap-6 mb-6">
          <div className="bg-white p-6 rounded-lg shadow-lg">
            <h3 className="text-lg font-semibold mb-4">Proporção de Clientes (%)</h3>
            <ResponsiveContainer width="100%" height={400}>
              <PieChart>
                <Pie
                  data={dadosPizza}
                  cx="50%"
                  cy="50%"
                  outerRadius={120}
                  dataKey="value"
                  label={({ name, value, percent }) => `${name}: ${(percent * 100).toFixed(1)}%`}
                >
                  {dadosPizza.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip formatter={(value, name) => [`${value} clientes`, name]} />
              </PieChart>
            </ResponsiveContainer>
          </div>
        </div>

        {/* Tabela de Performance */}
        <div className="bg-white rounded-lg shadow-lg">
          <div className="p-6">
            <h3 className="text-lg font-semibold mb-4">Performance dos Executivos</h3>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left py-2">Executivo</th>
                    <th className="text-left py-2">Total Clientes</th>
                    <th className="text-left py-2">Propostas Enviadas</th>
                    <th className="text-left py-2">Pendentes</th>
                    <th className="text-left py-2">% do Total</th>
                    <th className="text-left py-2">Taxa Conversão</th>
                  </tr>
                </thead>
                <tbody>
                  {estatisticas.map((stat, index) => (
                    <tr key={index} className="border-b hover:bg-gray-50">
                      <td className="py-3 flex items-center gap-2">
                        <div 
                          className="w-4 h-4 rounded-full"
                          style={{ backgroundColor: stat.cor }}
                        />
                        {stat.nome}
                      </td>
                      <td className="py-3">{stat.total}</td>
                      <td className="py-3">{stat.propostas}</td>
                      <td className="py-3">{stat.pendentes}</td>
                      <td className="py-3">{stat.percentual}%</td>
                      <td className="py-3">
                        {stat.total > 0 ? ((stat.propostas / stat.total) * 100).toFixed(1) : 0}%
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen">
      <h1 className="text-3xl font-bold text-gray-800 mb-6">Sistema de Distribuição de Atendimentos</h1>
      
      {erro && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {erro}
        </div>
      )}

      {/* Painel de Controle */}
      <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Adicionar Cliente
            </label>
            <div className="flex gap-2">
              <input
                type="text"
                value={novoCliente}
                onChange={(e) => setNovoCliente(e.target.value)}
                placeholder="Nome do cliente"
                className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                onKeyPress={(e) => e.key === 'Enter' && adicionarCliente()}
              />
              <button
                onClick={adicionarCliente}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center gap-2"
              >
                <Plus size={16} />
                Adicionar
              </button>
            </div>
            {executivos.length > 0 && (
              <p className="text-sm text-gray-600 mt-2">
                Próximo: <span className="font-semibold" style={{ color: executivos[proximoExecutivo].cor }}>
                  {executivos[proximoExecutivo].nome}
                </span>
              </p>
            )}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Gerenciar Executivos
            </label>
            <div className="flex gap-2">
              <input
                type="text"
                value={novoExecutivo}
                onChange={(e) => setNovoExecutivo(e.target.value)}
                placeholder="Nome do executivo"
                className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                onKeyPress={(e) => e.key === 'Enter' && adicionarExecutivo()}
              />
              <button
                onClick={adicionarExecutivo}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center gap-2"
              >
                <Users size={16} />
                Adicionar
              </button>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Adicionar Lista Manual
            </label>
            <div className="flex gap-2 mb-2">
              <select
                value={uploadExecutivo}
                onChange={(e) => setUploadExecutivo(e.target.value)}
                className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Selecione executivo</option>
                {executivos.map(exec => (
                  <option key={exec.id} value={exec.nome}>{exec.nome}</option>
                ))}
              </select>
              <button
                onClick={() => setShowListaInput(!showListaInput)}
                className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 flex items-center gap-2"
              >
                <Upload size={16} />
                Lista
              </button>
            </div>
            {showListaInput && (
              <div className="mt-2">
                <textarea
                  value={listaClientes}
                  onChange={(e) => setListaClientes(e.target.value)}
                  placeholder="Digite os nomes dos clientes (um por linha)"
                  rows="4"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <button
                  onClick={processarListaManual}
                  className="mt-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
                >
                  Adicionar Lista
                </button>
              </div>
            )}
          </div>
        </div>

        <div className="flex gap-2 mt-4">
          <button
            onClick={pularCliente}
            className="bg-orange-600 text-white px-4 py-2 rounded-lg hover:bg-orange-700"
          >
            Pular Próximo
          </button>
          <button
            onClick={() => setShowDashboard(true)}
            className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 flex items-center gap-2"
          >
            <BarChart3 size={16} />
            Dashboard
          </button>
        </div>
      </div>

      {/* Lista de Executivos */}
      <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
        <h3 className="text-lg font-semibold mb-4">Executivos Cadastrados</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {executivos.map((exec, index) => (
            <div key={exec.id} className="flex items-center justify-between p-3 border rounded-lg">
              <div className="flex items-center gap-2">
                <div 
                  className="w-4 h-4 rounded-full"
                  style={{ backgroundColor: exec.cor }}
                />
                <span className="font-medium">{exec.nome}</span>
                {index === proximoExecutivo && (
                  <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">
                    Próximo
                  </span>
                )}
              </div>
              <button
                onClick={() => removerExecutivo(exec.id)}
                className="text-red-600 hover:text-red-800"
              >
                <Trash2 size={16} />
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* Busca e Filtros */}
      <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
        <div className="flex gap-4">
          <div className="flex-1">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Buscar Cliente/Executivo
            </label>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
              <input
                type="text"
                value={busca}
                onChange={(e) => setBusca(e.target.value)}
                placeholder="Digite o nome..."
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          <div className="flex-1">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Filtrar Colunas
            </label>
            <input
              type="text"
              value={filtroColuna}
              onChange={(e) => setFiltroColuna(e.target.value)}
              placeholder="Filtrar por qualquer coluna..."
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>
      </div>

      {/* Tabela de Clientes */}
      <div className="bg-white rounded-lg shadow-lg">
        <div className="p-6">
          <h3 className="text-lg font-semibold mb-4">Lista de Atendimentos ({clientesFiltrados.length})</h3>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b">
                  <th className="text-left py-2">Cliente</th>
                  <th className="text-left py-2">Executivo</th>
                  <th className="text-left py-2">Data de Entrada</th>
                  <th className="text-left py-2">Proposta</th>
                  <th className="text-left py-2">Ações</th>
                </tr>
              </thead>
              <tbody>
                {clientesFiltrados.map((cliente) => (
                  <tr key={cliente.id} className="border-b hover:bg-gray-50">
                    <td className="py-3 font-medium">{cliente.nome}</td>
                    <td className="py-3">
                      <div className="flex items-center gap-2">
                        <div 
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: cliente.cor }}
                        />
                        {cliente.executivo}
                      </div>
                    </td>
                    <td className="py-3">{cliente.dataEntrada}</td>
                    <td className="py-3">
                      <button
                        onClick={() => toggleProposta(cliente.id)}
                        className={`px-3 py-1 rounded-full text-sm font-medium ${
                          cliente.propostaEnviada
                            ? 'bg-green-100 text-green-800'
                            : 'bg-orange-100 text-orange-800'
                        }`}
                      >
                        {cliente.propostaEnviada ? 'Enviada' : 'Pendente'}
                      </button>
                    </td>
                    <td className="py-3">
                      <button
                        onClick={() => excluirCliente(cliente.id)}
                        className="text-red-600 hover:text-red-800"
                      >
                        <Trash2 size={16} />
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SistemaAtendimento;